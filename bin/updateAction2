#!/usr/bin/env node

const { Pool } = require('pg');
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: true
}); 
const monster = require('../monster');

const day = new Date().getDay();
const hour = new Date().getHours();
const min = new Date().getMinutes();
doWork();

async function doWork() {
try {
  const client = await pool.connect();
  // 30분마다 (기본 피로도, 필드보스, 던전)
  await client.query('update characters set actionPoint = actionPoint + 1 where actionPoint < 100');
  
  const resultg = await client.query('select * from global');
  for (val of resultg.rows) {
    var glb = JSON.parse(val.globals);
    if (glb.fieldBossSpawned0 > 0) {
    const resultx = await client.query('select * from characters');
    for (val of resultx.rows) {
      var charData = JSON.parse(val.char_data);
      charData.dungeonInfos.runFieldBoss0 = false;
      await client.query('update characters set char_data = $1 where uid = $2', [JSON.stringify(charData), val.uid]);
    } 
      
      await client.query('insert into raids(rindex, open, phase, monsters) values (3, \'O\', 1, $1)', 
        [JSON.stringify({1 : monster.rKines1, 2 : monster.rInfernal, 3 : monster.rKines2})]);
      glb.fieldBossSpawned0--;
    }
    if (glb.fieldBossSpawned0 === 0) {
      await client.query('update raids set open = $1 where rindex = 4', ['C']);
      glb.fieldBossSpawned0 = -1;
    }
  }
  await client.query('update global set globals = $1', [JSON.stringify(glb)]);
  
  client.release();  
  } catch (err) {
  }
  }