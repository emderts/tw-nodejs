#!/usr/bin/env node

const { Pool } = require('pg');
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: true
}); 

const day = new Date().getDay();
const hour = new Date().getHours();
doWork();

async function doWork() {
try {
  const client = await pool.connect();
  if ((day >= 1 && day <= 5) || hour % 6 !== 0) {
    await client.query('update characters set actionPoint = actionPoint + 1 where actionPoint < 20');
  } else {
    await client.query('update characters set actionPoint = actionPoint + 3');
    await client.query('update characters set actionPoint = 20 where actionPoint > 20');
  }  
  if (hour == 6) {
    await client.query('update characters set actionPoint = actionPoint + 3');
    await client.query('update characters set actionPoint = 20 where actionPoint > 20');
  
    const result = await client.query('select * from characters');
    for (val of result.rows) {
      var charData = JSON.parse(val.char_data);
      if (day == 1) {
        delete charData.dayStoneBought;
        delete charData.actionBought;
      }
      charData.dungeonInfos.runMevious = false;
      charData.dungeonInfos.runEmberCrypt = false;
      charData.quest = {};
      var quests = [{code : 1, progress : 0, target : 3},
                    {code : 2, progress : 0, target : 5},
                    {code : 3, progress : 0, target : 5},
                    {code : 4, progress : 0, target : 5},
                    {code : 5, progress : 0, target : 3},
                    {code : 6, progress : 0, target : 8},
                    {code : 7, progress : 0, target : 2},
                    {code : 8, progress : 0, target : 1},
                    {code : 9, progress : 0, target : 1},
                    {code : 10, progress : 0, target : 10},
                    {code : 11, progress : 0, target : 1},
                    {code : 12, progress : 0, target : 50}];
      var rand = Math.floor(Math.random() * 12);
      var target = quests[rand];
      target.rewardType = Math.floor(Math.random() * 4);
      target.rewardAmt = 0;
      charData.quest[target.code] = target;
      quests.splice(rand, 1);
      var rand = Math.floor(Math.random() * 11);
      var target = quests[rand];
      target.rewardType = Math.floor(Math.random() * 4);
      target.rewardAmt = 0;
      charData.quest[target.code] = target;
      quests.splice(rand, 1);
      var rand = Math.floor(Math.random() * 10);
      var target = quests[rand];
      target.rewardType = Math.floor(Math.random() * 4);
      target.rewardAmt = 0;
      charData.quest[target.code] = target;
      quests.splice(rand, 1);
      
      await client.query('update characters set char_data = $1 where uid = $2', [JSON.stringify(charData), val.uid]);
    } 
  }
  if (hour % 6 == 0) {
  
    const result = await client.query('select * from characters');
    for (val of result.rows) {
      var charData = JSON.parse(val.char_data);
      charData.dungeonInfos.runBurningOrchard = false;
      await client.query('update characters set char_data = $1 where uid = $2', [JSON.stringify(charData), val.uid]);
    } 
  }
  client.release();  
  } catch (err) {
  }
  }